import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const Reservations = () => {
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        name: "",
        email: "",
        date: "",
        time: "",
        guests: 1
    });

    const [reservations, setReservations] = useState([]);

    // üîπ Charger les anciennes r√©servations depuis l‚ÄôAPI prot√©g√©e
    useEffect(() => {
        const token = localStorage.getItem("token");

        if (!token) {
            console.warn("Utilisateur non connect√©. Impossible de r√©cup√©rer les r√©servations.");
            return;
        }

        fetch("http://127.0.0.1:8000/api/reservations/", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        })
        .then(response => response.json())
        .then(data => {
            setReservations(data);  // üî• les donn√©es viennent de l'API maintenant
        })
        .catch(error => {
            console.error("Erreur lors du chargement des r√©servations :", error);
        });
    }, []);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const token = localStorage.getItem("token");

        if (!token) {
            alert("Vous devez √™tre connect√© pour r√©server.");
            navigate("/login");
            return;
        }

        try {
            const response = await fetch("http://127.0.0.1:8000/api/reservations/", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (response.ok) {
                console.log("R√©servation r√©ussie :", data);
                setReservations([...reservations, data]);  // On ajoute la nouvelle r√©servation retourn√©e par l'API
                navigate("/confirmation", { state: { reservationData: data } });
            } else {
                alert(data?.error || "Erreur lors de la r√©servation.");
                console.error("Erreur serveur :", data);
            }

        } catch (error) {
            console.error("Erreur r√©seau :", error);
            alert("Erreur lors de la r√©servation. Veuillez r√©essayer.");
        }
    };

    return (
        <div style={{ maxWidth: "400px", margin: "auto", padding: "20px", textAlign: "center" }}>
            <h2>R√©server une chambre</h2>

            <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column" }}>
                <input type="text" name="name" placeholder="Votre Nom" value={formData.name} onChange={handleChange} required />
                <input type="email" name="email" placeholder="Votre Email" value={formData.email} onChange={handleChange} required />
                <input type="date" name="date" value={formData.date} onChange={handleChange} required />
                <input type="time" name="time" value={formData.time} onChange={handleChange} required />
                <input type="number" name="guests" min="1" placeholder="Nombre de personnes" value={formData.guests} onChange={handleChange} required />
                <button type="submit" style={{ marginTop: "10px", padding: "10px", backgroundColor: "#28a745", color: "white", border: "none", cursor: "pointer" }}>
                    Confirmer la r√©servation
                </button>
            </form>

            <div style={{ marginTop: "20px" }}>
                <h3>R√©servations pr√©c√©dentes :</h3>
                {reservations.length === 0 ? (
                    <p>Aucune r√©servation enregistr√©e.</p>
                ) : (
                    <ul>
                        {reservations.map((res, index) => (
                            <li key={index}>
                                {res.name} - {res.date} √† {res.time} ({res.guests} pers.)
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

export default Reservations;
